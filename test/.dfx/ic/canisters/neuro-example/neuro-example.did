type Test = 
 service {
   get_canister_wallet_balances: () ->
    (record {
       chat_balance: nat;
       icp_balance: nat;
     });
   /// Example canister wallet functions: ///
   get_canister_wallet_information: () ->
    (record {
       icp_legacy_account: text;
       icrc_account: text;
     }) query;
   get_sns_neuron_information: () -> (Result_1);
   stake_sns_neuron: () -> (Result);
 };
type Subaccount = record {subaccount: blob;};
type SnsNeuronInformation = 
 record {
   aging_since_timestamp_seconds: nat64;
   auto_stake_maturity: opt bool;
   cached_neuron_stake_e8s: nat64;
   created_timestamp_seconds: nat64;
   disburse_maturity_in_progress: vec DisburseMaturityInProgress;
   dissolve_state: opt DissolveState;
   followees: vec record {
                    nat64;
                    Followees;
                  };
   id: opt NeuronId;
   maturity_e8s_equivalent: nat64;
   neuron_fees_e8s: nat64;
   permissions: vec NeuronPermission;
   source_nns_neuron_id: opt nat64;
   staked_maturity_e8s_equivalent: opt nat64;
   vesting_period_seconds: opt nat64;
   voting_power_percentage_multiplier: nat64;
 };
type Result_1 = 
 variant {
   err: text;
   ok: SnsNeuronInformation;
 };
type Result = 
 variant {
   err: text;
   ok: blob;
 };
type NeuronPermission = 
 record {
   permission_type: vec int32;
   "principal": opt principal;
 };
type NeuronId = record {id: blob;};
type Followees = record {followees: vec NeuronId;};
type DissolveState = 
 variant {
   DissolveDelaySeconds: nat64;
   WhenDissolvedTimestampSeconds: nat64;
 };
type DisburseMaturityInProgress = 
 record {
   account_to_disburse_to: opt Account;
   amount_e8s: nat64;
   finalize_disbursement_timestamp_seconds: opt nat64;
   timestamp_of_disbursement_seconds: nat64;
 };
type Account = 
 record {
   owner: opt principal;
   subaccount: opt Subaccount;
 };
service : () -> Test

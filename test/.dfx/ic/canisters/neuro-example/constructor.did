type Account = record { owner : opt principal; subaccount : opt Subaccount };
type DisburseMaturityInProgress = record {
  timestamp_of_disbursement_seconds : nat64;
  amount_e8s : nat64;
  account_to_disburse_to : opt Account;
  finalize_disbursement_timestamp_seconds : opt nat64;
};
type DissolveState = variant {
  DissolveDelaySeconds : nat64;
  WhenDissolvedTimestampSeconds : nat64;
};
type Followees = record { followees : vec NeuronId };
type NeuronId = record { id : vec nat8 };
type NeuronPermission = record {
  "principal" : opt principal;
  permission_type : vec int32;
};
type Result = variant { ok : vec nat8; err : text };
type Result_1 = variant { ok : SnsNeuronId; err : text };
type Result_2 = variant { ok : SnsNeuronInformation; err : text };
type SnsNeuronId = vec nat8;
type SnsNeuronInformation = record {
  id : opt NeuronId;
  staked_maturity_e8s_equivalent : opt nat64;
  permissions : vec NeuronPermission;
  maturity_e8s_equivalent : nat64;
  cached_neuron_stake_e8s : nat64;
  created_timestamp_seconds : nat64;
  source_nns_neuron_id : opt nat64;
  auto_stake_maturity : opt bool;
  aging_since_timestamp_seconds : nat64;
  dissolve_state : opt DissolveState;
  voting_power_percentage_multiplier : nat64;
  vesting_period_seconds : opt nat64;
  disburse_maturity_in_progress : vec DisburseMaturityInProgress;
  followees : vec record { nat64; Followees };
  neuron_fees_e8s : nat64;
};
type Subaccount = record { subaccount : vec nat8 };
type Test = service {
  get_canister_wallet_balances : () -> (
      record { chat_balance : nat; icp_balance : nat },
    );
  get_canister_wallet_information : () -> (
      record { icp_legacy_account : text; icrc_account : text },
    ) query;
  get_sns_neuron_information : () -> (Result_2);
  list_sns_neurons : () -> (vec SnsNeuronInformation);
  split_sns_neuron : () -> (Result_1);
  stake_sns_neuron : () -> (Result);
};
service : () -> Test